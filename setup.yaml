# SAMBA v2 FIRMWARE
# initial firmware flashed to new SAMBAs to facilitate setup
# written by Thomas Parkinson, July 2025


# Define calibration coefficients for SAMBA
# https://esphome.io/components/substitutions.html
substitutions:
  building_name: "building"
  level_name: "level"
  zone_name: "zone"
  influx_publish: "true"
  ha_publish: "false"
  co2_m: "1.015844"
  co2_b: "20.139092"
  lux_m: "5.988641"
  lux_b: "0.0"
  ta_m: "0.9750601"
  ta_b: "-3.9853163"
  rh_m: "0.8839748"
  rh_b: "15.0758039"
  tg_m: "0.9093902"
  tg_b: "0.6127004"  
  as1_a: "0.000878414013334"
  as1_b: "1.446429921572743"
  as1_c: "1.344253500261520"
  as2_a: "0.000700721710849"
  as2_b: "1.592948717475052"
  as2_c: "1.389994766781412"

# Define global variable placeholders
# https://esphome.io/components/globals.html
globals:
  - id: building_tag
    type: std::string
    max_restore_data_length: 24
    restore_value: yes
    initial_value: '"x"'
  - id: level_tag
    type: std::string
    max_restore_data_length: 24
    restore_value: yes
    initial_value: '"x"'
  - id: zone_tag
    type: std::string
    max_restore_data_length: 24
    restore_value: yes
    initial_value: '"x"'
  - id: influx_enable
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: ha_enable
    type: bool
    restore_value: yes
    initial_value: 'false'
  - id: calibration_co2
    type: double[2]
    restore_value: yes
    initial_value: '{1.0, 1.0}'
  - id: calibration_lux
    type: double[2]
    restore_value: yes
    initial_value: '{1.0, 1.0}'
  - id: calibration_ta
    type: double[2]
    restore_value: yes
    initial_value: '{1.0, 1.0}'
  - id: calibration_rh
    type: double[2]
    restore_value: yes
    initial_value: '{1.0, 1.0}'
  - id: calibration_tg
    type: double[2]
    restore_value: yes
    initial_value: '{1.0, 1.0}'
  - id: calibration_as1
    type: double[3]
    restore_value: yes
    initial_value: '{1.0, 1.0, 1.0}'
  - id: calibration_as2
    type: double[3]
    restore_value: yes
    initial_value: '{1.0, 1.0, 1.0}'

# Make sure they get written to flash
# https://esphome.io/components/esphome.html#preferences-component
preferences:
  flash_write_interval: 1s

# Define ESPHome settings
# https://esphome.io/components/esphome
esphome:
  name: "samba"
  name_add_mac_suffix: true
  min_version: "2025.6.1"
  on_boot:
    - priority: 100
      then: 
        - light.turn_on:
            id: samba_led
            effect: pulse_fast

# Define ESP32 board
# https://www.espressif.com/sites/default/files/documentation/esp32-wroom-32e_esp32-wroom-32ue_datasheet_en.pdf
esp32:
  board: esp32dev
  flash_size: 16MB
  framework:
    type: arduino

# Define logger
# https://esphome.io/components/logger
logger:
  level: DEBUG

# Use captive portal for wifi configuration
# https://esphome.io/components/captive_portal.html
captive_portal:

# Configure access point
# https://esphome.io/components/wifi
wifi:
  ap:
    ssid: "samba_connect"
    ap_timeout: 30s

# Write globals to flash once connected to WiFi
  on_connect:
    - lambda: |-
        id(building_tag) = "${building_name}";
        id(level_tag) = "${level_name}";
        id(zone_tag) = "${zone_name}";
        id(influx_enable) = std::string("${influx_publish}") == "true";
        id(ha_enable) = std::string("${ha_publish}") == "true";
        id(calibration_co2)[0] = double(${co2_m});
        id(calibration_co2)[1] = double(${co2_b});
        id(calibration_lux)[0] = double(${lux_m});
        id(calibration_lux)[1] = double(${lux_b});
        id(calibration_ta)[0] = double(${ta_m});
        id(calibration_ta)[1] = double(${ta_b});
        id(calibration_rh)[0] = double(${rh_m});
        id(calibration_rh)[1] = double(${rh_b});
        id(calibration_tg)[0] = double(${tg_m});
        id(calibration_tg)[1] = double(${tg_b});
        id(calibration_as1)[0] = double(${as1_a});
        id(calibration_as1)[1] = double(${as1_b});
        id(calibration_as1)[2] = double(${as1_c});
        id(calibration_as2)[0] = double(${as2_a});
        id(calibration_as2)[1] = double(${as2_b});
        id(calibration_as2)[2] = double(${as2_c});

# Print out globals
    - delay: 1s
    - logger.log: 
        format: "SAMBA %s is born"
        args: ['WiFi.macAddress().c_str()']
        level: INFO
        tag: "samba"
    - logger.log: 
        format: "IP address is %s"
        args: ['WiFi.localIP().toString().c_str()']
        level: INFO
        tag: "samba"
    - logger.log:
        format: "Assigned to Building: %s, Level: %s, Zone: %s"
        args: [ 'id(building_tag).c_str()', 'id(level_tag).c_str()', 'id(zone_tag).c_str()' ]
        level: INFO
        tag: "samba"
    - logger.log:
        format: "Influx publishing: %s"
        args: [ 'id(influx_enable) ? "true" : "false"' ]
        level: INFO
        tag: "samba"
    - logger.log:
        format: "Home Assistant publishing: %s"
        args: [ 'id(ha_enable) ? "true" : "false"' ]
        level: INFO
        tag: "samba"
    - logger.log:
        format: "CO2 calibration: y = %.12fx + %.12fb"
        args: [ 'id(calibration_co2)[0]', 'id(calibration_co2)[1]' ]
        level: INFO
        tag: "samba"
    - logger.log:
        format: "Lux calibration: y = %.12fx + %.12fb"
        args: [ 'id(calibration_lux)[0]', 'id(calibration_lux)[1]' ]
        level: INFO
        tag: "samba"
    - logger.log:
        format: "Ta calibration: y = %.12fx + %.12fb"
        args: [ 'id(calibration_ta)[0]', 'id(calibration_ta)[1]' ]
        level: INFO
        tag: "samba"
    - logger.log:
        format: "RH calibration: y = %.12fx + %.12fb"
        args: [ 'id(calibration_rh)[0]', 'id(calibration_rh)[1]' ]
        level: INFO
        tag: "samba"
    - logger.log:
        format: "Tg calibration: y = %.12fx + %.12fb"
        args: [ 'id(calibration_tg)[0]', 'id(calibration_tg)[1]' ]
        level: INFO
        tag: "samba"
    - logger.log:
        format: "Air speed 1 calibration: y = %.12f * mV^%.12f * ta^%.12f"
        args: [ 'id(calibration_as1)[0]', 'id(calibration_as1)[1]', 'id(calibration_as1)[2]' ]
        level: INFO
        tag: "samba"
    - logger.log:
        format: "Air speed 2 calibration: y = %.12f * mV^%.12f * ta^%.12f"
        args: [ 'id(calibration_as2)[0]', 'id(calibration_as2)[1]', 'id(calibration_as2)[2]' ]
        level: INFO
        tag: "samba"

# Check for SAMBA firmware online
    - delay: 10s
    - logger.log:
        format: "Checking for SAMBA firmware"
        level: INFO
        tag: "samba"
    - ota.http_request.flash:
        md5_url: https://github.com/IEQLab/samba/raw/main/firmware/firmware.md5
        url: https://github.com/IEQLab/samba/raw/main/firmware/firmware.ota.bin

# Enable HTTP Request component required for remote OTA
# https://esphome.io/components/http_request.html
http_request:
    id: http_client
    verify_ssl: false

# Configure over-the-air updates
# https://esphome.io/components/ota/
# https://esphome.io/components/ota/http_request
ota:
  - platform: esphome
    password: !secret ota_password
  - platform: http_request
    on_progress:
      then:
        - logger.log:
            format: "OTA progress: %0.1f%%"
            args: ["x"]
            level: INFO
            tag: "samba"

# Define status LED component
# https://esphome.io/components/light/esp32_rmt_led_strip.html
light:
  - platform: esp32_rmt_led_strip
    id: samba_led
    rgb_order: GRB
    pin: GPIO27
    num_leds: 1
    rmt_symbols: 64
    use_psram: false
    chipset: ws2812
    effects:
      - pulse:
          name: "pulse_fast"
          transition_length: 0.5s
          update_interval: 0.5s
          max_brightness: 0.20
