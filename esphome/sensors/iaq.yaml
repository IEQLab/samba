# SAMBA v2 FIRMWARE
# configure IAQ sensors on SAMBA
# written by Thomas Parkinson, May 2024


# define K30 sensor
sensor:
  - platform: k30
    i2c_id: bus_a
    address: 0x69
    update_interval: 10s
    use_abc: true
    co2:
      id: k30_co2
      filters:
        - filter_out: NAN
        - clamp:
            min_value: 350
            max_value: 10000
            ignore_out_of_range: true
        - median:
            window_size: 30
            send_every: 3
            send_first_at: 1

# CO2 sensor
  - platform: template
    id: samba_co2
    name: "Carbon Dioxide"
    update_interval: never
    accuracy_decimals: 0
    device_class: carbon_dioxide
    unit_of_measurement: "ppm"
    icon: mdi:molecule-co2
    lambda: |-
      return id(k30_co2).state;


# Particulate Matter
# https://esphome.io/components/sensor/pmsx003.html
  - platform: pmsx003
    type: PMS5003T
    uart_id: uart_pm
    pm_2_5:
      id: pms_pm25
      internal: true
      filters:
        - clamp:
            min_value: 0
            max_value: 1000
            ignore_out_of_range: true
        - median:
            window_size: 300
            send_every: 30
            send_first_at: 30
    temperature:
      id: pms_temp
      internal: true
    humidity:
      id: pms_rh
      internal: true
      filters:
        - clamp:
            min_value: 0
            max_value: 100
            ignore_out_of_range: true
        - median:
            window_size: 300

# PM2.5 sensor
  - platform: template
    id: samba_pm25
    name: "PM2.5"
    update_interval: never
    accuracy_decimals: 0
    device_class: pm25
    unit_of_measurement: "Âµg/m3"
    icon: mdi:molecule
    lambda: |-
      if (id(pms_pm25).state < 30) {
        return ((0.524 * id(pms_pm25).state) - (0.0862 * id(pms_rh).state) + 5.75);
      } else if(id(pms_pm25).state < 50) {
        return ((0.786 * (id(pms_pm25).state)/20.0 -3/2) + 0.524 * (1 - (id(pms_pm25).state)/20 -3/2) * id(pms_pm25).state - (0.0862 * id(pms_rh).state) + 5.75);
      } else if(id(pms_pm25).state < 210) {
        return ((0.786 * (id(pms_pm25).state)) - (0.0862 * id(pms_rh).state) + 5.75);
      } else if(id(pms_pm25).state < 260) {
        return ((0.69 * (id(pms_pm25).state)/50 -21/5) + 0.786 * (1 - (id(pms_pm25).state)/50 -21/5) * id(pms_pm25).state);
      } else {
        return 0;
      }

# Define TVOC / NOx sensor
# https://esphome.io/components/sensor/sgp4x.html
  - platform: sgp4x
    update_interval: 60s
    compensation:
      temperature_source: sht_temperature
      humidity_source: sht_humidity
    voc:
      id: sgp_voc
      internal: true
      algorithm_tuning:
        learning_time_offset_hours: 720
      filters:
        - median:
            window_size: 5
            send_every: 1
            send_first_at: 1
    nox:
      id: sgp_nox
      internal: true
      filters:
        - median:
            window_size: 5
            send_every: 1
            send_first_at: 1

# TVOC / NOx index sensors
  - platform: template
    id: samba_voc
    name: "TVOC"
    update_interval: never
    accuracy_decimals: 0
    device_class: volatile_organic_compounds
    unit_of_measurement: "ppb"
    icon: mdi:radiator
    lambda: |-
      return (std::log(501.0 - id(sgp_voc).state) - 6.24) * (-996.94);
    
  - platform: template
    id: samba_nox
    name: "NOx Index"
    update_interval: never
    accuracy_decimals: 0
    device_class: aqi
    icon: mdi:radiator
    lambda: |-
      return id(sgp_nox).state;
