# SAMBA v2 FIRMWARE
# configure sampling loop SAMBA
# written by Thomas Parkinson, May 2024


# Define scipt to update measurement values
# https://esphome.io/guides/automations.html#script-component
script:
  - id: sensor_sample
    then:
      - if:
          condition: 
            lambda: |-
              return id(sys_uptime).state > 60;
          then:
            - light.turn_on:
                id: led_esp
            - component.update: sys_time
            - component.update: samba_temperature
            - component.update: samba_humidity
            - component.update: samba_globe
            - component.update: samba_airspeed
            - component.update: samba_co2
            - component.update: samba_pm25
            - component.update: samba_voc
            - component.update: samba_nox
            - component.update: samba_lux
            - component.update: samba_spl
            - delay: 200ms
            - text_sensor.template.publish: 
                id: sys_time
                state: !lambda 'return id(sys_time).state;'
            - sensor.template.publish: 
                id: samba_temperature
                state: !lambda 'return id(samba_temperature).state;'
            - sensor.template.publish: 
                id: samba_humidity
                state: !lambda 'return id(samba_humidity).state;'
            - sensor.template.publish: 
                id: samba_globe
                state: !lambda 'return id(samba_globe).state;'
            - sensor.template.publish: 
                id: samba_airspeed
                state: !lambda 'return id(samba_airspeed).state;'
            - sensor.template.publish: 
                id: samba_co2
                state: !lambda 'return id(samba_co2).state;'
            - sensor.template.publish: 
                id: samba_pm25
                state: !lambda 'return id(samba_pm25).state;'
            - sensor.template.publish: 
                id: samba_voc
                state: !lambda 'return id(samba_voc).state;'
            - sensor.template.publish: 
                id: samba_nox
                state: !lambda 'return id(samba_nox).state;'
            - sensor.template.publish: 
                id: samba_lux
                state: !lambda 'return id(samba_lux).state;'
            - sensor.template.publish: 
                id: samba_spl
                state: !lambda 'return id(samba_spl).state;'
            - logger.log:
                level: INFO
                format: "Sample taken at %s"
                args: ['id(sys_time).state.c_str()']
            - light.turn_off:
                id: led_esp
          else:
            - component.update: sys_uptime
            - logger.log: 
                level: INFO
                format: "Please wait...warming up SAMBA device"
