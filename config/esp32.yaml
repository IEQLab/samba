# SAMBA v2 FIRMWARE
# configure ESP microcontroller
# written by Thomas Parkinson, May 2024


# Define ESP32 board
# https://www.espressif.com/sites/default/files/documentation/esp32-wroom-32e_esp32-wroom-32ue_datasheet_en.pdf
esp32:
  board: esp32dev
  flash_size: 16MB
  framework:
    type: esp-idf

# Define ESPHome settings
# https://esphome.io/components/esphome
esphome:
  name: "samba"
  friendly_name: "SAMBA"
  comment: "Monitor IEQ using low-cost sensors - developed by the IEQ Lab"
  name_add_mac_suffix: true
  min_version: "2025.7.0"
  project:
    name: "IEQLab.SAMBA"
    version: "1.99.70"
  on_boot:
    - priority: 100
      then: 
        - light.turn_on:
            id: samba_led
            effect: strobe_g
        - component.update: sys_uptime
        - component.update: sys_ip
        - delay: 1000ms
    - priority: -100
      then:
      
        # Synchronise system to RTC clock
        - delay: 200ms
        - ds1307.read_time:
        
        # Print useful diagnostics
        - lambda: |-
            ESP_LOGI("samba", "Startup OK :) Building: %s, Level: %s, Zone: %s, Influx: %s, Time: %s",
                     id(building_tag).c_str(), id(level_tag).c_str(), id(zone_tag).c_str(),
                     id(influx_enable) ? "true" : "false",
                     ESPTime::from_epoch_utc(id(ds1307_time).now().timestamp).strftime("%Y-%m-%dT%H:%M:%S+00:00").c_str());

            ESP_LOGI("samba", "Calibrations:\n"
                              "CO2:  y = ppm*%.4fx + %.4f\n"
                              "Lux:  y = lux*%.4fx + %.4f\n"
                              "Ta:   y = ta*%.4fx + %.4f\n"
                              "RH:   y = rh*%.4fx + %.4f\n"
                              "Tg:   y = tg*%.4fx + %.4f\n"
                              "AS1:  y = %.6f * mV^%.6f * ta^%.6f\n"
                              "AS2:  y = %.6f * mV^%.6f * ta^%.6f",
                      id(calibration_co2_m), id(calibration_co2_b),
                      id(calibration_lux_m), id(calibration_lux_b),
                      id(calibration_ta_m), id(calibration_ta_b),
                      id(calibration_rh_m), id(calibration_rh_b),
                      id(calibration_tg_m), id(calibration_tg_b),
                      id(calibration_as1_c), id(calibration_as1_m), id(calibration_as1_b),
                      id(calibration_as2_c), id(calibration_as2_m), id(calibration_as2_b));

# Set logging to errors only
# https://esphome.io/components/logger
logger:
  level: INFO
  logs:
    samba: INFO
    main: WARN
    component: NONE
    sensor: NONE
    i2c: INFO
    wire.cpp: NONE
    ads1115.sensor: ERROR
    ntc: NONE
    resistance: NONE
    opt3001.sensor: NONE
    pmsx003: NONE
    senseair_i2c: ERROR
    sensirion_i2c: ERROR
    sgp4x: ERROR
    sound_level_meter: ERROR
    http_request: ERROR
    influxdb: INFO

# Define i2c
# https://esphome.io/components/i2c
i2c:
  - id: bus_a
    scl: GPIO25
    sda: GPIO26
    scan: true
    frequency: 50kHz
    timeout: 7ms

# Configure UART
# https://esphome.io/components/uart
uart:
  - id: uart_pm
    rx_pin: GPIO16
    tx_pin: GPIO17
    baud_rate: 9600
