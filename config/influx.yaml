# SAMBA v2 FIRMWARE
# configure upload of data to remote InfluxDB server
# custom component
# written by Thomas Parkinson, May 2024


# Define InfluxDB connection
influxdb_writer:
  id: influx_writer
  use_ssl: true
  host: "${influx_host}"
  port: "${influx_port}"
  token: "${influx_token}"
  org: "${influx_org}"
  bucket: "${influx_bucket}"
  timestamp_unit: "s"
  http_request_id: http_client
  time_id: sntp_time
  send_mac: true

  # Define Influx measurements for sensors
  sensor_names:
    air_temp: "Air Temperature"
    rel_humidity: "Relative Humidity"
    globe_temp: "Globe Temperature"
    air_speed: "Air Speed"
    co2: "Carbon Dioxide"
    pm25: "PM2.5"
    tvoc: "TVOC"
    nox: "NOx Index"
    illuminance: "Illuminance"
    spl: "Sound Pressure Level"

  # Define Influx field keys
  field_names:
    air_temp: "value"
    rel_humidity: "value"
    globe_temp: "value"
    air_speed: "value"
    co2: "value"
    pm25: "value"
    tvoc: "value"
    nox: "value"
    illuminance: "value"
    spl: "value"

#   Define Influx tags for fields
#   Note: these are overwritten at boot by below script
#   sensor_tags:
#     temp:
#       building: "INSERT"
#       level: "INSERT"
#       zone: "INSERT"

# Define script to set tags on boot using global variables
# https://esphome.io/components/script.html
script:
  - id: set_influx_tags
    mode: queued
    then:
      - lambda: |-
          id(influx_writer).set_dynamic_tag("air_temp", "building", id(building_tag));
          id(influx_writer).set_dynamic_tag("air_temp", "level", id(level_tag));
          id(influx_writer).set_dynamic_tag("air_temp", "zone", id(zone_tag));

          id(influx_writer).set_dynamic_tag("rel_humidity", "building", id(building_tag));
          id(influx_writer).set_dynamic_tag("rel_humidity", "level", id(level_tag));
          id(influx_writer).set_dynamic_tag("rel_humidity", "zone", id(zone_tag));

          id(influx_writer).set_dynamic_tag("globe_temp", "building", id(building_tag));
          id(influx_writer).set_dynamic_tag("globe_temp", "level", id(level_tag));
          id(influx_writer).set_dynamic_tag("globe_temp", "zone", id(zone_tag));

          id(influx_writer).set_dynamic_tag("air_speed", "building", id(building_tag));
          id(influx_writer).set_dynamic_tag("air_speed", "level", id(level_tag));
          id(influx_writer).set_dynamic_tag("air_speed", "zone", id(zone_tag));

          id(influx_writer).set_dynamic_tag("co2", "building", id(building_tag));
          id(influx_writer).set_dynamic_tag("co2", "level", id(level_tag));
          id(influx_writer).set_dynamic_tag("co2", "zone", id(zone_tag));

          id(influx_writer).set_dynamic_tag("pm25", "building", id(building_tag));
          id(influx_writer).set_dynamic_tag("pm25", "level", id(level_tag));
          id(influx_writer).set_dynamic_tag("pm25", "zone", id(zone_tag));

          id(influx_writer).set_dynamic_tag("tvoc", "building", id(building_tag));
          id(influx_writer).set_dynamic_tag("tvoc", "level", id(level_tag));
          id(influx_writer).set_dynamic_tag("tvoc", "zone", id(zone_tag));

          id(influx_writer).set_dynamic_tag("nox", "building", id(building_tag));
          id(influx_writer).set_dynamic_tag("nox", "level", id(level_tag));
          id(influx_writer).set_dynamic_tag("nox", "zone", id(zone_tag));

          id(influx_writer).set_dynamic_tag("illuminance", "building", id(building_tag));
          id(influx_writer).set_dynamic_tag("illuminance", "level", id(level_tag));
          id(influx_writer).set_dynamic_tag("illuminance", "zone", id(zone_tag));

          id(influx_writer).set_dynamic_tag("spl", "building", id(building_tag));
          id(influx_writer).set_dynamic_tag("spl", "level", id(level_tag));
          id(influx_writer).set_dynamic_tag("spl", "zone", id(zone_tag));
