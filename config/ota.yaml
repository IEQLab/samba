# SAMBA v2 FIRMWARE
# configure over-the-air update support
# written by Thomas Parkinson, May 2024


# Enable OTA access
# https://esphome.io/components/ota.html
ota:
  - platform: esphome
    password: "${ota_password}"
    on_begin:
      then:
        - logger.log: 
            format: "Updating SAMBA through esphome"
            tag: "samba"
  - platform: http_request
    on_progress:
      then:
        - logger.log:
            format: "OTA progress: %0.1f%%"
            args: ["x"]
            level: INFO
            tag: "samba"

# Enable managed updates
# https://esphome.io/components/update/http_request.html#
update:
  - platform: http_request
    id: fw_update
    name: "Firmware"
    source: https://github.com/IEQLab/samba/raw/main/firmware.json
    update_interval: 1h

# Enable HTTP Request component for OTA and Influx
# https://esphome.io/components/http_request.html
http_request:
    id: http_client
    verify_ssl: true
    timeout: 8s
    watchdog_timeout: 10s

# Explicitly enable safe mode
# https://esphome.io/components/safe_mode
safe_mode:
  on_safe_mode:
    then:
      - logger.log: "Restoring SAMBA due to an unknown error"
      - light.turn_on:
          id: samba_led
          effect: slow_pulse
      - ota.http_request.flash:
          md5_url: http://github.com/IEQLab/samba/raw/main/restore/firmware_recovery.md5
          url: http://github.com/IEQLab/samba/raw/main/restore/firmware_recovery.bin

# Store jitter delay as a global variable
globals:
  - id: fw_jitter_ms
    type: uint32_t
    restore_value: no
    initial_value: '0'

# Define script to scatter firmware update checks
script:
  - id: fw_check
    mode: queued
    then:
      # compute 0â€“10 min jitter
      - lambda: |-
          id(fw_jitter_ms) = esp_random() % (10 * 60 * 1000);
      - logger.log:
          format: "Weekly update check; jitter = %u ms"
          args: ['id(fw_jitter_ms)']
          level: INFO
          tag: "samba"

      # yield to scheduler for the jitter duration
      - delay: !lambda 'return id(fw_jitter_ms);'

      # then do the update check
      - if:
          condition:
            update.is_available: fw_update
          then:
            - logger.log: 
                format: "Update available; starting OTA"
                level: INFO
                tag: "samba"
            - update.perform:
                id: fw_update
          else:
            - logger.log: 
                format: "No update available"
                level: INFO
                tag: "samba"
